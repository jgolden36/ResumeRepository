import os
import numpy as np
import pandas as pd
from matplotlib.offsetbox import AnnotationBbox, OffsetImage
#os.chdir("C:/Users/Dana Annie/Downloads/Textbooks Spring 2022/OMS Analytics/Computational Data Analysis/homework3")
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KernelDensity
from scipy import stats
Data = np.genfromtxt('data/n90pol.csv', delimiter=',')[1:,:]
plt.figure()
plt.hist(Data[:,0:1], density=True, bins=30)
plt.ylabel('Count')
plt.xlabel('amygdalaValue')
plt.show()
plt.figure()
plt.hist(Data[:,1:2], density=True, bins=20)
plt.ylabel('Count')
plt.xlabel('accValue')
plt.show()
AmygdalaSeries=pd.Series(Data[:,0:1].flatten())
Acceries=pd.Series(Data[:,1:2].flatten())
AmygdalaSeries.plot.kde()
Acceries.plot.kde()
#amygdalaFit=KernelDensity(kernel='gaussian', bandwidth=.01).fit(Data[:,0:1])
#logprobAmg = amygdalaFit.score_samples(Data[:,0:1])
#plt.fill_between(Data[:,0:1].flatten(), np.exp(logprobAmg), alpha=0.5)
#plt.plot(Data[:,0:1].flatten(), np.full_like(Data[:,0:1].flatten(), -0.01), '|k', markeredgewidth=1)
#plt.ylabel('Probability')
#plt.xlabel('amygdalaValue')
#plt.show()
#accFit=KernelDensity(kernel='gaussian', bandwidth=0.01).fit(Data[:,1:2])
#logprobAcc=accFit.score_samples(Data[:,1:2])
#plt.fill_between(Data[:,1:2].flatten(), np.exp(logprobAcc), alpha=0.5)
#plt.plot(Data[:,1:2].flatten(), np.full_like(Data[:,1:2].flatten(), -0.01), '|k', markeredgewidth=1)
#plt.ylabel('Probability')
#plt.xlabel('accValue')
#plt.show()
plt.figure()
plt.hist2d(Data[:,0:1].flatten(),Data[:,1:2].flatten(),bins=20)
plt.ylabel('accValue')
plt.xlabel('amygdalaValue')
plt.show()
xmin=Data[:,0:1].min()
ymin=Data[:,1:2].min()
xmax=Data[:,0:1].max()
ymax=Data[:,1:2].max()
X, Y = np.mgrid[xmin:xmax:9j, ymin:ymax:10j]
positions = np.vstack([Data[:,0:1].ravel(), Data[:,1:2].ravel()])
vectorStack=np.vstack([Data[:,0:1].flatten(),Data[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue')
plt.show()
oneValues=np.empty((1,3))
twoValues=np.empty((1,3))
threeValues=np.empty((1,3))
fourValues=np.empty((1,3))
fiveValues=np.empty((1,3))
for row in Data:
	if row[2]==1:
		oneValues=np.vstack((oneValues,row))
	elif row[2]==2:
		twoValues=np.vstack((twoValues,row))
	elif row[2]==3:
		threeValues=np.vstack((threeValues,row))
	elif row[2]==4:
		fourValues=np.vstack((fourValues,row))
	elif row[2]==5:
		fiveValues=np.vstack((fiveValues,row))
ConditionalAmygdalaSeries1=pd.Series(oneValues[:,0:1].flatten())
ConditionalAmygdalaSeries2=pd.Series(twoValues[:,0:1].flatten())
ConditionalAmygdalaSeries3=pd.Series(threeValues[:,0:1].flatten())
ConditionalAmygdalaSeries4=pd.Series(fourValues[:,0:1].flatten())
ConditionalAmygdalaSeries5=pd.Series(fiveValues[:,0:1].flatten())
fig, ax = plt.subplots()
ax=ConditionalAmygdalaSeries2.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAmygdalaSeries3.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAmygdalaSeries4.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAmygdalaSeries5.plot.kde()
plt.show()
ConditionalAccSeries1=pd.Series(oneValues[:,1:2].flatten())
ConditionalAccSeries2=pd.Series(twoValues[:,1:2].flatten())
ConditionalAcceries3=pd.Series(threeValues[:,1:2].flatten())
ConditionalAccSeries4=pd.Series(fourValues[:,1:2].flatten())
ConditionalAccSeries5=pd.Series(fiveValues[:,1:2].flatten())
fig, ax = plt.subplots()
ax=ConditionalAccSeries2.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAcceries3.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAccSeries4.plot.kde()
plt.show()
fig, ax = plt.subplots()
ax=ConditionalAccSeries5.plot.kde()
plt.show()
print(np.mean(twoValues[:,0:1]))
print(np.mean(threeValues[:,1:2]))
print(np.mean(fourValues[:,0:1]))
print(np.mean(fiveValues[:,0:1]))
print(np.mean(twoValues[:,1:2]))
print(np.mean(threeValues[:,1:2]))
print(np.mean(fourValues[:,1:2]))
print(np.mean(fiveValues[:,1:2]))
xmin=twoValues[:,0:1].min()
ymin=twoValues[:,1:2].min()
xmax=twoValues[:,0:1].max()
ymax=twoValues[:,1:2].max()
X, Y = np.mgrid[xmin:xmax:2j, ymin:ymax:7j]
positions = np.vstack([twoValues[:,0:1].ravel(), twoValues[:,1:2].ravel()])
vectorStack=np.vstack([twoValues[:,0:1].flatten(),twoValues[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue C=2')
plt.show()
xmin=threeValues[:,0:1].min()
ymin=threeValues[:,1:2].min()
xmax=threeValues[:,0:1].max()
ymax=threeValues[:,1:2].max()
X, Y = np.mgrid[xmin:xmax:5j, ymin:ymax:5j]
positions = np.vstack([threeValues[:,0:1].ravel(), threeValues[:,1:2].ravel()])
vectorStack=np.vstack([threeValues[:,0:1].flatten(),threeValues[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue C=3')
plt.show()
xmin=fourValues[:,0:1].min()
ymin=fourValues[:,1:2].min()
xmax=fourValues[:,0:1].max()
ymax=fourValues[:,1:2].max()
X, Y = np.mgrid[xmin:xmax:7j, ymin:ymax:6j]
positions = np.vstack([fourValues[:,0:1].ravel(), fourValues[:,1:2].ravel()])
vectorStack=np.vstack([fourValues[:,0:1].flatten(),fourValues[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue C=4')
plt.show()
xmin=fiveValues[:,0:1].min()
ymin=fiveValues[:,1:2].min()
xmax=fiveValues[:,0:1].max()
ymax=fiveValues[:,1:2].max()
X, Y = np.mgrid[xmin:xmax:1j, ymin:ymax:13j]
positions = np.vstack([fiveValues[:,0:1].ravel(), fiveValues[:,1:2].ravel()])
vectorStack=np.vstack([fiveValues[:,0:1].flatten(),fiveValues[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue C=5')
plt.show()
X, Y = np.mgrid[xmin:xmax:13j, ymin:ymax:1j]
positions = np.vstack([fiveValues[:,0:1].ravel(), fiveValues[:,1:2].ravel()])
vectorStack=np.vstack([fiveValues[:,0:1].flatten(),fiveValues[:,1:2].flatten()])
kernal=stats.gaussian_kde(vectorStack)
Z = np.reshape(kernal(positions).T, X.shape)
fig, ax = plt.subplots()
ax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,
          extent=[xmin, xmax, ymin, ymax])
ax.set_xlim([xmin, xmax])
ax.set_ylim([ymin, ymax])
plt.ylabel('accValue')
plt.xlabel('amygdalaValue C=5')
plt.show()